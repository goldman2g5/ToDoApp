@page "/"
@inject NavigationManager NavigationManager
@using ToDoApp.Client.Models;
@using ToDoApp.Client.Data;
@using ToDoApp.Client.Dialog;
@inject ILocalStorageService LocalStorage
@inject IDialogService DialogService

<AuthorizeView>
    <MudGrid Justify="Justify.Center">
        <MudItem>
            <MudPaper Height="1000px" Width="600px">
                <MudContainer>
                    <MudText>Your boards</MudText>
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="CreateBoard">New Board</MudButton>
                    <MudGrid Spacing="3" Justify="Justify.Center">
                        @if (Boards.Count == 0)
                        {
                            <MudItem>
                                <img src="https://media.tenor.com/B85QfhcxFKMAAAAd/rat-spinning.gif" Height="200" With="100" />
                            </MudItem>
                            
                        }
                        @foreach (BoardClient i in Boards)
                        {
                            <MudItem>
                                <MudCard>
                                    <MudCardContent>
                                        <MudText Typo="Typo.h5">@i.Name</MudText>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Kayaking" @onclick="() => GoToBoard(i.Id)">Open</MudButton>
                                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="() => DeleteBoard(i.Id)">Delete</MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                </MudContainer>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Height="1000px" Width="600px">
                <MudContainer>
                    <MudText>Your boards</MudText>
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.People" Color="Color.Primary" @onclick="JoinBoard">Join Board</MudButton>
                </MudContainer>
                <MudGrid Spacing="3" Justify="Justify.Center">
                    @if (GroupBoards.Count == 0)
                    {
                        <MudItem>
                            <MudItem>
                                <img src="https://media.tenor.com/B85QfhcxFKMAAAAd/rat-spinning.gif" Height="200" With="100" />
                            </MudItem>
                        </MudItem>
                    }
                    @foreach (BoardClient i in GroupBoards)
                    {
                        <MudItem>
                            <MudCard>
                                <MudCardContent>
                                    <MudText Typo="Typo.h5">@i.Name</MudText>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Kayaking" @onclick="() => GoToBoard(i.Id)">Open</MudButton>
                                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="() => DeleteBoard(i.Id)">Delete</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</AuthorizeView>




@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public List<BoardClient> Boards = new List<BoardClient>();
    public List<BoardClient> GroupBoards = new List<BoardClient>();

    string username;


    protected override async Task OnInitializedAsync()
    {
        UpdateBoards();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            // Do work to load page data and set properties
        }
    }

    public async Task UpdateBoards()
    {
        List<BoardClient> AllBoards = await BoardService.GetAll();
        List<ConnectionClient> connections = await ConnectionService.GetAll();
        List<UserClient> users = await UserClientService.GetAll();

        var state = await authenticationStateTask;
        username = state.User.Identity.Name;
        if (username == null)
            return;
        int userid = users.Find(x => x.Username == username).Id;


        connections = connections.Where(x => x.User == userid).ToList();
        Boards = AllBoards.Where(x => connections.Where(x => x.IsCreator == true).Select(x => x.Board).Contains(x.Id)).ToList();
        GroupBoards = AllBoards.Where(x => connections.Where(x => x.IsCreator == false).Select(x => x.Board).Contains(x.Id)).ToList();
        StateHasChanged();
    }

    //public async void CreateBoard()
    //{
    //    var state = await authenticationStateTask;
    //    string UserName = state.User.Identity.Name;
    //    BoardClient newBoard = new BoardClient
    //        {
    //            Name =  $"{UserName}'s new board"
    //    };
    //    BoardClient board = await BoardService.Create(newBoard);
    //    await CreateConnection(board.Id, true);
    //    UpdateBoards();
    //}

    public async void DeleteBoard(int BoardId)
    {
        int userid = await GetUserId();
        List<AppointmentData> appoinments = await AppointmentService.GetAll();
        List<ConnectionClient> connections = await ConnectionService.GetAll();
        if (connections.Where(x => x.Board == BoardId & x.User == userid).Any(x => x.IsCreator == true))
        {
            foreach (var i in appoinments.Where(x => x.Board == BoardId))
            {
                await AppointmentService.Delete(i.Id);
            }
            foreach (var i in connections.Where(x => x.Board == BoardId))
            {
                await ConnectionService.Delete(i.Id);
            }
            await BoardService.Delete(BoardId);
        }
        else
        {
            foreach (var i in connections.Where(x => x.User == userid & x.Board == BoardId))
            {
                await ConnectionService.Delete(i.Id);
            }
        }
        await UpdateBoards();
    }
    
    private async void CreateBoard()
    {    
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        DialogResult? dialogResult = await (await DialogService.ShowAsync<CreateBoardDialog>("New Board", closeOnEscapeKey)).Result;
        string name = (string)dialogResult.Data;
        if (name == null) return;
        BoardClient newBoard = new BoardClient
        {
            Name = name
        };
        BoardClient board = await BoardService.Create(newBoard);
        await CreateConnection(board.Id, true);
        await UpdateBoards();
    }
    
    public async void JoinBoard()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        DialogResult? dialogResult = await (await DialogService.ShowAsync<JoinBoardDialog>("Join Board", closeOnEscapeKey)).Result;
        if (dialogResult == null) return;
        string code = (string)dialogResult.Data;
        List<BoardClient> boards = await BoardService.GetAll();
        BoardClient board = boards.Find(x => x.InviteCode == code);
        if (board == null)
        {
            await DialogService.ShowMessageBox("Error", "Board not found");
            return;
        }
        await CreateConnection(board.Id, false);
        await UpdateBoards();
    }

    public async Task CreateConnection(int BoardId, bool isCreator)
    {
        //Оптимизировать
        List<UserClient> users = await UserClientService.GetAll();
        int userid = await GetUserId();
        List<ConnectionClient> connections = await ConnectionService.GetAll();
        if (!connections.Any(x => x.User == userid & x.Board == BoardId))
        {
            ConnectionClient connection = new ConnectionClient
                {
                    User = userid,
                    Board = BoardId,
                    IsCreator = isCreator
                };
            await ConnectionService.Create(connection);
        }
    }

    public async Task<int> GetUserId()
    {
        List<UserClient> users = await UserClientService.GetAll();
        var state = await authenticationStateTask;
        string UserName = state.User.Identity.Name;
        int userid = users.Find(x => x.Username == UserName).Id;
        return userid;
    }


    public async void GoToBoard(int BoardId)
    {
        await CreateConnection(BoardId, false);
        NavigationManager.NavigateTo($"/Board/{BoardId}");
    }
}