@page "/Board/{BoardId:int}"
@using ToDoApp.Client.Models;
@using ToDoApp.Client.Data;
@using Syncfusion.Blazor.Data
@using System.Collections.ObjectModel
@using System.ComponentModel
@using ToDoApp.Client.Components;
@using Newtonsoft.Json;
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        
        <MudGrid>
            <MudItem>
                <MudButton @onclick="exportdata">
                    ЭСПОРТ ДАННЫХ
                </MudButton>
            </MudItem>
            <MudItem>
                <SfSchedule @ref="ScheduleRef" TValue="AppointmentData" Height="650px">
                    <ScheduleEvents TValue="AppointmentData" ActionCompleted="OnActionCompleted"></ScheduleEvents>
                    <ScheduleEventSettings DataSource="@ObservableData" TValue="AppointmentData"></ScheduleEventSettings>
                    <ScheduleViews>
                        <ScheduleView Option="View.Day"></ScheduleView>
                        <ScheduleView Option="View.Week"></ScheduleView>
                        <ScheduleView Option="View.WorkWeek"></ScheduleView>
                        <ScheduleView Option="View.Month"></ScheduleView>
                        <ScheduleView Option="View.Agenda"></ScheduleView>
                    </ScheduleViews>
                </SfSchedule>
            </MudItem>

            <MudItem>
                @if (!IsConnected)
                {
                }
                else
                {
                    <textarea style="width:100%; height:500px" @ref="TextAreaRef" readonly>@messages</textarea>
                    <div class="input-group">
                        <input @bind-value="message"
                           @bind-value:event="oninput"
                           @onkeyup="HandleInput" class="form-control" />
                        <button class="btn btn-primary form-group-append"
                            @onclick="Send"
                            disabled="@(!IsConnected)">
                            Send
                        </button>
                    </div>
                }
            </MudItem>
        </MudGrid>





    </Authorized>
    <NotAuthorized>
        <img src="https://i.gifer.com/origin/51/51f1ea94effbb251598e67e8522e58f5.gif" />
    </NotAuthorized>
</AuthorizeView>
<PageTitle>Index</PageTitle>



@code {
    [Parameter]
    public int BoardId { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    SfSchedule<AppointmentData> ScheduleRef;
    List<AppointmentData> DataSource = new List<AppointmentData>();
    string Status = "";
    public ObservableCollection<AppointmentData> ObservableData { get; set; }
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;
    ElementReference TextAreaRef;

    public async Task exportdata()
    {
        BoardClient board = await BoardService.GetById(BoardId);
        List<AppointmentData> appointments = board.AppointmentData.ToList();

        string filePath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); 

        string output = string.Empty;
        output += $"Board";
        output += $"\n";
        output += $"Id:{board.Id}\n";
        output += $"Name:{board.Name}\n";

        output += $"Appointments:";
        output += $"\n";

        foreach(var i in appointments)
        {
            output += $"Subject:{i.Subject}\n";
            output += $"Starts:{i.StartTime}\n";
            output += $"Ends:{i.EndTime}\n";
            output += $"\n";
        }

        // Create the file and write some text to it
        using (StreamWriter writer = new StreamWriter(filePath + "/exportedData"))
        {
            writer.WriteLine(output);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateAppointment();

        hubConnection = new HubConnectionBuilder().
        WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
       .Build();

        hubConnection.On<string, string, string>("ReciveMessage", (user, message, chatid) =>
        {
            if (chatid == BoardId.ToString())
            {
                var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {message}";
                messages += msg + "\n";
                StateHasChanged();
            }

        });

        hubConnection.On<string>("ReciveSyncRequest", async (requestjson) =>
        {
            Console.WriteLine($"Беброчка пришла {requestjson}");

            await UpdateAppointment();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public async Task UpdateAppointment()
    {
        List<AppointmentData> appointments = await AppointmentService.GetAll();
        appointments = appointments.Where(x => x.Board == BoardId).ToList();
        ObservableData = new ObservableCollection<AppointmentData>(appointments);
        StateHasChanged();
    }

    public async void OnActionCompleted(ActionEventArgs<AppointmentData> args)
    {
        if (args.ActionType == ActionType.EventCreate)
        {
            AppointmentData record = args.AddedRecords[0];
            Status = "Success";
            record.Board = BoardId;
            await AppointmentService.Create(record);
            await SendSyncRequest(record.Id, "Create");
        }

        if (args.ActionType == ActionType.EventRemove)
        {
            args.Cancel = true;
            AppointmentData record = args.DeletedRecords[0];
            await AppointmentService.Delete(record.Id);
            await SendSyncRequest(record.Id, "Delete");

        }

        if (args.ActionType == ActionType.EventChange)
        {
            AppointmentData record = args.ChangedRecords[0];
            await AppointmentService.Update(record);
            await SendSyncRequest(record.Id, "Update");
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }
    private async Task Send()
    {
        var state = await authenticationStateTask;
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("SendMessage", $"{state.User.Identity.Name}", message, BoardId.ToString());
            message = string.Empty;
        }
    }

    private async Task SendSyncRequest(int id, string action)
    {

        if (hubConnection != null)
        {
            SyncAppointmentRequestClient request = new SyncAppointmentRequestClient()
                {
                    id = id,
                    action = action,
                    boardid = BoardId

                };
            string json = JsonConvert.SerializeObject(request);
            Console.WriteLine($"Занюхнул беброчки {json}");
            await hubConnection.SendAsync("SendSyncRequest", json);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}